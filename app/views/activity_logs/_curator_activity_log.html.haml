- link_style ||= nil
- display_curator ||= false
- data_object ||= nil
- taxon_concept ||= nil
- bulk = data_object || taxon_concept
- translation_vars = {:scope => [:activity_logs, :curator_activity_log]}
- translation_vars[:reasons] = item.untrust_reasons.map(&:label).to_sentence
- item.untrust_reasons.nil? ? [] : item.untrust_reasons.map(&:label)
- user_type = 'user'
- if item.user.nil?
  - user_type = 'an_unknown_user'
- else
  - translation_vars[:user] = link_to(h(item.user.full_name), user_url(item.user),
    :style => link_style)
  - if display_curator && item.user.is_curator?
    - translation_vars[:user] = raw(I18n.t(:user_full_name_with_curator, :user => translation_vars[:user],
      :curator_level => item.user.curator_level.translated_label))
- data_object_type = data_object ? 'it' : 'data_object'
- if item.data_object.nil?
  - data_object_type = 'an_unknown_data_object'
- else
  - translation_vars[:data_object] = link_to(item.data_object.summary_name, data_object_url(item.data_object),
    :style => link_style)
- language_type = 'language'
- if item.is_for_synonym?
  - if item.synonym.nil? || item.synonym.language.nil?
    - language_type = 'an_unknown_language'
  - else
    - translation_vars[:language] = item.synonym.language.label
- association_type = 'association'
- if item.unknown_association?
  - association_type = 'an_unknown_association'
- else
  - if !item.hierarchy_entry_id.nil?
    - translation_vars[:association] = link_to(item.hierarchy_entry.name.string,
      taxon_url(item.hierarchy_entry.taxon_concept), :style => link_style)
  - else
    - translation_vars[:association] = link_to(raw(item.taxon_concept.title),
      taxon_url(item.taxon_concept), :style => link_style)
- name_type = 'name'
- if item.is_for_synonym?
  - if item.synonym.nil? || ! item.synonym.respond_to?(:name)
    - name_type = 'an_unknown_name'
  - else
    - translation_vars[:name] = item.synonym.name.string
- taxon_type = taxon_concept ? 'it' : 'taxon'
- if item.taxon_concept.nil? || ! item.taxon_concept.is_a?(TaxonConcept)
  - taxon_type = 'an_unknown_taxon'
- else
  - translation_vars[:taxon] = link_to(raw(item.taxon_concept.quick_scientific_name), taxon_url(item.taxon_concept),
    :style => link_style)
-# NOTE the weird exception: merge_classifications uses the *object* taxon concept, not the source TC (for now):
-# THE MERGE/SPLIT ACTIVITIES ARE LEGACY...
- if item.activity_id == Activity.merge_classifications.id && item.changeable_object_type_id == ChangeableObjectType.taxon_concept.id
  - tc = TaxonConcept.find(item.target_id) rescue nil
  - taxon_type = tc ? 'taxon' : 'an_unknown_taxon'
  - translation_vars[:taxon] = link_to(tc.quick_scientific_name, taxon_url(tc), :style => link_style)
- if (item.activity_id == Activity.split_classifications.id || item.activity_id == Activity.merge_classifications.id || item.activity_id == Activity.preferred_classification.id) && item.hierarchy_entry
  - provider = hierarchy_entry_display_attribution(HierarchyEntry.find(item.hierarchy_entry), :show_rank => false, :show_link => true)
  - if item.hierarchy_entry.has_source_database?
    - provider = raw(I18n.t(:recognized_by_from_source, :recognized_by => provider, :source => item.hierarchy_entry.hierarchy.agent.full_name))
  - translation_vars.reverse_merge!(:provider => provider)
%p
  - case item.activity_id
  - when Activity.trusted.id
    = raw I18n.t("trusted.#{user_type}_trusted_#{data_object_type}_on_#{association_type}", translation_vars)
  - when Activity.untrusted.id
    = raw I18n.t("untrusted.#{user_type}_untrusted_#{data_object_type}_on_#{association_type}", translation_vars)
    - unless translation_vars[:reasons].empty? || bulk
      %br/
      = raw I18n.t(:reasons_to_untrust, translation_vars)
  - when Activity.show.id
    = raw I18n.t("show.#{user_type}_showed_#{data_object_type}_on_#{association_type}", translation_vars)
  - when Activity.hide.id
    = raw I18n.t("hide.#{user_type}_hid_#{data_object_type}_on_#{association_type}", translation_vars)
    - unless translation_vars[:reasons].empty? || bulk
      %br/
      = raw I18n.t(:reasons_to_hide, translation_vars)
  - when Activity.unreviewed.id
    = raw I18n.t("unreviewed.#{user_type}_unreviewed_#{data_object_type}_on_#{association_type}", translation_vars)
  - when Activity.add_association.id
    = raw I18n.t("add_association.#{user_type}_associated_#{data_object_type}_to_#{association_type}", translation_vars)
  - when Activity.remove_association.id
    = raw I18n.t("remove_association.#{user_type}_disassociated_#{data_object_type}_from_#{association_type}", translation_vars)
  - when Activity.choose_exemplar_image.id
    = raw I18n.t("choose_exemplar_image.#{user_type}_chose_exemplar_#{data_object_type}_on_#{taxon_type}", translation_vars)
  - when Activity.choose_exemplar_article.id
    = raw I18n.t("choose_exemplar_article.#{user_type}_chose_exemplar_#{data_object_type}_on_#{taxon_type}", translation_vars)
  - when Activity.crop.id
    = raw I18n.t("crop.#{user_type}_cropped_#{data_object_type}", translation_vars)
  - when Activity.add_common_name.id
    = raw I18n.t("add_common_name.#{user_type}_added_#{name_type}_in_#{language_type}_to_#{taxon_type}", translation_vars)
  - when Activity.remove_common_name.id
    = raw I18n.t("remove_common_name.#{user_type}_removed_name_in_#{language_type}_from_#{taxon_type}", translation_vars)
  - when Activity.trust_common_name.id
    = raw I18n.t("trust_common_name.#{user_type}_trusted_#{name_type}_in_#{language_type}_on_#{taxon_type}", translation_vars)
  - when Activity.untrust_common_name.id
    = raw I18n.t("untrust_common_name.#{user_type}_untrusted_#{name_type}_in_#{language_type}_on_#{taxon_type}", translation_vars)
  - when Activity.unreview_common_name.id
    = raw I18n.t("unreview_common_name.#{user_type}_unreviewed_#{name_type}_in_#{language_type}_on_#{taxon_type}", translation_vars)
  - when Activity.curate_classifications.id
    - if item.classification_curation
      - translation_vars[:classifications] = item.classification_curation.hierarchy_entries.map {|he| he.hierarchy.display_title }.to_sentence
      - target_type = item.classification_curation.moved_to ? 'taxon' : 'an_unknown_taxon'
      - translation_vars[:target] = item.classification_curation.moved_to ? link_to(item.classification_curation.moved_to.quick_scientific_name, taxon_url(item.classification_curation.moved_to), :style => link_style) : nil
      - if item.classification_curation.split?
        - translation_vars[:to] = taxon_url(item.classification_curation.split_to)
        = raw I18n.t("classification_curation.split.#{user_type}_split_classifications_from_#{taxon_type}", translation_vars)
      - elsif item.classification_curation.merge?
        = raw I18n.t("classification_curation.merge.#{user_type}_merged_to_#{target_type}", translation_vars)
      - else # move
        -# Sad but true: the taxon_type is already the target, so we need to change it:
        - source_tc = item.classification_curation.moved_from
        - taxon_type = 'taxon'
        - if source_tc.nil? || ! source_tc.is_a?(TaxonConcept)
          - taxon_type = 'an_unknown_taxon'
        - else
          - translation_vars[:taxon] = link_to(source_tc.quick_scientific_name, taxon_url(source_tc), :style => link_style)
        = raw I18n.t("classification_curation.move.#{user_type}_moved_classifications_from_#{taxon_type}_to_#{target_type}", translation_vars)
    - else
      = raw I18n.t("classification_curation.#{user_type}_curated_unkown_classification_from_#{taxon_type}", translation_vars)
    -# The next two (split, merge) are legacy, but we keep them because they ARE in the logs (in production):
  - when Activity.split_classifications.id # LEGACY
    - if item.hierarchy_entry
      = raw I18n.t("split.#{user_type}_split_entry_from_#{taxon_type}", translation_vars)
    - else
      = raw I18n.t("split.#{user_type}_split_unknown_entry_from_#{taxon_type}", translation_vars)
  - when Activity.merge_classifications.id # LEGACY
    - if item.hierarchy_entry
      = raw I18n.t("merge.#{user_type}_merged_entry_to_#{taxon_type}", translation_vars)
    - else
      = raw I18n.t("merge.#{user_type}_merged_unknown_entry_to_#{taxon_type}", translation_vars)
  - when Activity.preferred_classification.id
    - if item.hierarchy_entry
      = raw I18n.t("preferred_classification.#{user_type}_preferred_classification_on_#{taxon_type}", translation_vars)
    - else
      = raw I18n.t("preferred_classification.#{user_type}_preferred_unknown_classification_on_#{taxon_type}", translation_vars)
  - when Activity.unlock.id
    - if item.respond_to?(:classification_curation) && item.classification_curation
      - if item.classification_curation.split?
        - translation_vars[:to] = taxon_url(item.classification_curation.split_to)
        = raw I18n.t("unlock.split_of_#{taxon_type}_unlocked", translation_vars)
      - elsif item.classification_curation.merge?
        = raw I18n.t("unlock.merge_of_#{taxon_type}_unlocked", translation_vars)
      - else
        = raw I18n.t("unlock.move_of_#{taxon_type}_unlocked", translation_vars)
    - else
      = raw I18n.t("unlock.move_of_#{taxon_type}_unlocked", translation_vars)
  - when Activity.unlock_with_error.id
    - translation_vars[:error] = item.affected_comment.body
    - if item.respond_to?(:classification_curation) && item.classification_curation
      - if item.classification_curation.split?
        = raw I18n.t("unlock_with_error.split_of_#{taxon_type}_unlocked_with_error", translation_vars)
      - elsif item.classification_curation.merge?
        = raw I18n.t("unlock_with_error.merge_of_#{taxon_type}_unlocked_with_error", translation_vars)
      - else
        = raw I18n.t("unlock_with_error.move_of_#{taxon_type}_unlocked_with_error", translation_vars)
    - else
      = raw I18n.t("unlock_with_error.move_of_#{taxon_type}_unlocked_with_error", translation_vars)
  - else
    = raw I18n.t("other_actions.#{user_type}_curated_#{data_object_type}", translation_vars)
