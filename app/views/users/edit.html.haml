= javascript_include_tag "ckeditor/init"
- translation_vars = {:required_icon => image_tag('v2/icon_required.png', :alt => '')}
#profile_edit.article
  = form_for @user, :builder => ApplicationHelper::EolFormBuilder, :html => { :multipart => true } do |user_form|
    = validation_errors_for(@user)
    .fieldsets
      %fieldset.profile
        .header
          %h3= I18n.t(:users_form_profile_info_header)
        %p.tip
          = @user.eol_authentication? ? raw(t(".form_tip_profile", translation_vars.dup)) : raw(t(".form_tip_profile_oauth", translation_vars.dup))
        %dl
          %dt
            = user_form.label :bio
          %dd
            = user_form.text_area :bio
            %p= user_form.allowed_html_help_tip
          %dt.required
            = user_form.label :given_name
            %small.assistive= I18n.t(:required_form_element)
          %dd
            = user_form.text_field :given_name
          %dt.required
            = user_form.label :family_name
            %small.assistive= I18n.t(:required_form_element)
          %dd
            = user_form.text_field :family_name
          %dt
            = user_form.label :tag_line, raw(t('helpers.label.user.tag_line'))
          %dd
            = user_form.text_field :tag_line
          %dt
            = user_form.label :logo
          %dd
            = user_form.file_field :logo
          %dt
            = user_form.label :user_identities
          %dd
            = hidden_field_tag 'user[user_identity_ids][]', '', :id => "user_user_identity_ids"
            %ul
              - unless @user_identities.blank?
                - @user_identities.each do |identity|
                  %li
                    %label
                      = check_box_tag "user[user_identity_ids][]", identity.id, @user.user_identities.include?(identity), :id => "user_user_identity_ids_#{identity.id}"
                      = identity.label
    .fieldsets
      %fieldset.account
        .header
          %h3= I18n.t(:users_form_account_header)
        %p.tip
          = @user.eol_authentication? ? raw(t(".form_tip_account", translation_vars.dup)) : raw(t(".form_tip_account_oauth", translation_vars.dup))
        %dl
          %dt
            = I18n.t('helpers.label.user.open_authentications')
          %dd.copy
            %p= raw(I18n.t('helpers.label.user.open_authentications_more', :open_authentications_url => user_open_authentications_url(@user)))
            %ul
              - @user.open_authentications.each do |open_authentication|
                %li{:class => open_authentication.provider}
                  = I18n.t(open_authentication.provider, :scope => [:users, :open_authentications])
                  %small
                    = I18n.t('helpers.label.open_authentication.connected')
          - if @user.eol_authentication? || !@user.username.blank?
            %dt
              = user_form.label :username, raw(I18n.t('helpers.label.user.username'))
              %small.assistive= I18n.t(:required_form_element)
            %dd
              = user_form.text_field :username
            %dt
              = user_form.label :entered_password, raw(I18n.t('helpers.label.user.new_password'))
            %dd
              = user_form.password_field :entered_password, { :maxlength => 16 }
            %dt
              = user_form.label :entered_password_confirmation, raw(I18n.t('helpers.label.user.new_password_confirmation'))
            %dd
              = user_form.password_field :entered_password_confirmation, { :maxlength => 16 }
          %dt.required
            = user_form.label :language_abbr
            %small.assistive= I18n.t(:required_form_element)
          %dd
            = user_form.select :language_abbr, Language.approved_languages.collect {|l| [l.source_form, l.iso_639_1]}
            - user_form.label :news_in_preferred_language, :class => 'checkbox' do
              = user_form.check_box :news_in_preferred_language
              = I18n.t('helpers.label.user.news_in_preferred_language')
          %dt.required
            = user_form.label :email
            %small.assistive= I18n.t(:required_form_element)
          %dd
            = user_form.text_field :email, { :maxlength => 100 }
    .fieldsets
      %fieldset.requests
        - unless SiteConfigurationOption.exists?(:parameter => 'supress_activity_email')
          %dl
            %dt
              = I18n.t('helpers.label.user.notification_settings')
              %p
                = I18n.t('helpers.label.user.notification_settings_more')
            %dd
              = content_tag :button, :name => :commit_notification_settings_get, :type => :submit do
                = I18n.t('helpers.submit.user.notification_settings')
        %dl
          %dt
            = I18n.t('helpers.label.user.curation_application')
            %p
              - unless @user.curator_level.blank?
                = raw(I18n.t('helpers.label.user.curator_level', :curator_level_with_indefinite_article => I18n.t("curator_level_with_indefinite_article_#{@user.curator_level.translated_label.gsub(' ', '_').downcase}")))
              - unless @user.requested_curator_level.blank?
                = raw(I18n.t('helpers.label.user.requested_curator_level', :curator_level_with_indefinite_article => I18n.t("curator_level_with_indefinite_article_#{@user.requested_curator_level.translated_label.gsub(' ', '_').downcase}")))
              = I18n.t('helpers.label.user.curation_application_more')
          %dd
            = content_tag :button , :name => :commit_curation_privileges_get, :type => :submit do
              = I18n.t('helpers.submit.user.curation_application')
        %dl
          - if @user.api_key
            %dt
              = I18n.t('activerecord.attributes.user.api_key')
            %dd
              %textarea= @user.api_key
              %p= raw(I18n.t('helpers.label.user.api_key_more'))
          - else
            %dt
              = I18n.t('helpers.label.user.generate_api_key')
              %p= raw(I18n.t('helpers.label.user.generate_api_key_more', :api_docs_url => '/api/docs#api_key_section'))
            %dd
              = content_tag :button , :name => :commit_generate_api_key, :type => :submit do
                = I18n.t('helpers.submit.user.generate_api_key')

    - if @user.is_curator? || @user.is_pending_curator?
      %fieldset.curation_credentials
        .header
          %h3= I18n.t(:users_form_curation_header)
        %p.tip= raw(t(".form_tip_curation", translation_vars.dup))
        %dl
          %dt
            = user_form.label :credentials
          %dd
            = user_form.cktext_area(:credentials, :toolbar => 'UserEdit', :height => 200, :width => 518)
            %p= user_form.allowed_html_help_tip
          %dt
            = user_form.label :curator_scope
          %dd
            = user_form.text_area :curator_scope
            %p= user_form.allowed_html_help_tip
    %fieldset.actions
      = user_form.submit I18n.t('helpers.submit.user.update')
      = link_to I18n.t('helpers.submit.cancel'), @user
